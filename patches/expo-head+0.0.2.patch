diff --git a/node_modules/expo-head/build/ExpoHead.ios.js b/node_modules/expo-head/build/ExpoHead.ios.js
index 588b301..4a84570 100644
--- a/node_modules/expo-head/build/ExpoHead.ios.js
+++ b/node_modules/expo-head/build/ExpoHead.ios.js
@@ -1,6 +1,6 @@
 import { useIsFocused } from "@react-navigation/core";
 // @ts-ignore: TODO -- extract these into a shared library to prevent cyclic dependencies
-import { useLocalSearchParams, usePathname, useSegments } from "expo-router";
+import { useLocalSearchParams, useUnstableUrl, usePathname, useSegments } from "expo-router";
 import React from "react";
 import { ExpoHead } from "./ExpoHeadModule";
 import { getStaticUrlFromExpoRouter } from "./url";
@@ -14,13 +14,10 @@ function getLastSegment(path) {
 }
 // TODO: Use Head Provider to collect all props so only one Head is rendered for a given route.
 function useAddressableLink() {
-    const pathname = usePathname();
+    const pathname = useUnstableUrl();
+    console.log('pathname', pathname)
     const params = useLocalSearchParams();
-    const qs = new URLSearchParams(params).toString();
     let url = getStaticUrlFromExpoRouter(pathname);
-    if (qs) {
-        url += "?" + qs;
-    }
     return { url, pathname, params };
 }
 function useMetaChildren(children) {
@@ -137,7 +134,7 @@ function useActivityFromMetaChildren(meta) {
         webpageURL: url,
         activityType: ExpoHead.activities.INDEXED_ROUTE,
         userInfo: {
-            href: pathname,
+            href: href,
         },
     };
     return parsedActivity;
@@ -242,6 +239,8 @@ function HeadShim(props) {
     return null;
 }
 HeadShim.Provider = React.Fragment;
+HeadNative.useLink = useAddressableLink;
+HeadShim.useLink = useAddressableLink;
 // Native Head is only enabled in bare iOS apps.
 export const Head = ExpoHead ? HeadNative : HeadShim;
 //# sourceMappingURL=ExpoHead.ios.js.map
\ No newline at end of file
diff --git a/node_modules/expo-head/ios/ExpoHeadAppDelegateSubscriber.swift b/node_modules/expo-head/ios/ExpoHeadAppDelegateSubscriber.swift
index f1160f7..21967c9 100644
--- a/node_modules/expo-head/ios/ExpoHeadAppDelegateSubscriber.swift
+++ b/node_modules/expo-head/ios/ExpoHeadAppDelegateSubscriber.swift
@@ -53,30 +53,44 @@ func userInfoToQueryString(_ userInfo: [String : NSSecureCoding]?) -> String {
     return queryString
 }
 
+func prepareDeepLink(fragment: String) -> String {
+    // This can happen when an NSUserActivity href is used to activate the app.
+    if fragment.starts(with: "/") {
+        let schemes = InfoPlist.bundleURLSchemes()
+        
+        return "\(schemes[0])://\(fragment)"
+    }
+    
+    return fragment
+}
+
 public class ExpoHeadAppDelegateSubscriber: ExpoAppDelegateSubscriber {
     public func application(_ application: UIApplication, continue userActivity: NSUserActivity, restorationHandler: @escaping ([UIUserActivityRestoring]?) -> Void) -> Bool {
         launchedActivity = userActivity
         
         if let wellKnownHref = userActivity.userInfo?["href"] as? String {
+            // From a stored nsuseractivity, e.g. quick note or siri reminder
             // From other native device to app
-            sendFakeDeepLinkEventToReactNative(obj: self, url: wellKnownHref)
-        } else if var url = userActivity.webpageURL {
-            // From website to app
-            
-            let schemes = InfoPlist.bundleURLSchemes()
-            
-            var deepLink = "\(schemes[0])://\(url.relativePath)"
-                        
-            let components = URLComponents(string: url.absoluteString)
-            if let qs = components?.query {
-                deepLink += "?\(qs)"
-                deepLink += "&ref=web-handoff"
-            } else {
-                deepLink += "?ref=web-handoff"
-            }
-            
-            sendFakeDeepLinkEventToReactNative(obj: self, url: deepLink)
-        } else if (userActivity.activityType == CSQueryContinuationActionType) {
+            sendFakeDeepLinkEventToReactNative(obj: self, url: prepareDeepLink(fragment: wellKnownHref))
+        }
+//        else if var url = userActivity.webpageURL {
+//            // From website to app
+//            
+//            let schemes = InfoPlist.bundleURLSchemes()
+//            
+//            var deepLink = "\(schemes[0])://\(url.relativePath)"
+//                        
+//            let components = URLComponents(string: url.absoluteString)
+//            if let qs = components?.query {
+//                deepLink += "?\(qs)"
+//                deepLink += "&ref=web-handoff"
+//            } else {
+//                deepLink += "?ref=web-handoff"
+//            }
+//            
+//            sendFakeDeepLinkEventToReactNative(obj: self, url: deepLink)
+//        }
+        else if (userActivity.activityType == CSQueryContinuationActionType) {
             // From Spotlight search
             if let query = userActivity.userInfo?[CSSearchQueryString] as? String {
                 let schemes = InfoPlist.bundleURLSchemes()
diff --git a/node_modules/expo-head/ios/ExpoHeadModule.swift b/node_modules/expo-head/ios/ExpoHeadModule.swift
index bdb0d5f..f72014b 100644
--- a/node_modules/expo-head/ios/ExpoHeadModule.swift
+++ b/node_modules/expo-head/ios/ExpoHeadModule.swift
@@ -4,6 +4,16 @@ import ExpoModulesCore
 import CoreSpotlight
 import MobileCoreServices
 
+extension UIDevice {
+    static var isSimulator: Bool = {
+        #if targetEnvironment(simulator)
+        return true
+        #else
+        return false
+        #endif
+    }()
+}
+
 struct MetadataOptions: Record {
     @Field
     var activityType: String!
@@ -94,6 +104,8 @@ public class ExpoHeadModule: Module {
             
             let activity = createOrUpdateActivity(value: value)
             activity.becomeCurrent()
+            
+//            CSSearchableIndex.default().indexSearchableItems([activity.contentAttributeSet])
         }
         
         AsyncFunction("clearActivitiesAsync") { (ids: [String], promise: Promise) in
@@ -156,6 +168,7 @@ public class ExpoHeadModule: Module {
         att.title = value.title
         // Make all indexed routes deletable
         att.domainIdentifier = INDEXED_ROUTE
+        att.lastUsedDate = Date()
         
         if let localUrl = value.imageUrl?.path {
             att.thumbnailURL = value.imageUrl
@@ -167,6 +180,28 @@ public class ExpoHeadModule: Module {
         
         activity.contentAttributeSet = att;
         
+        
+        if (!UIDevice.isSimulator && value.isEligibleForSearch && existing == nil) {
+            let item = CSSearchableItem(uniqueIdentifier: value.webpageURL!.absoluteString, domainIdentifier: INDEXED_ROUTE, attributeSet: att)
+
+            CSSearchableIndex.default().indexSearchableItems([item]) { error in
+                if let error = error {
+                    log.warn("Head: Indexing error: \(error.localizedDescription)")
+                } else {
+                    log.info("Head: Search item successfully indexed")
+                }
+            }
+            
+
+//            do {
+//                try await CSSearchableIndex.default().indexSearchableItems([item])
+//                Logger.info("Head: Search item successfully indexed")
+//               } catch {
+//                   Logger.warn("Head: Indexing error: \(error.localizedDescription)")
+//               }
+            
+        }
+        
         return activity
     }
     
